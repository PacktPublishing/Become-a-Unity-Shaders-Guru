#pragma kernel CSMain

RWTexture2D<float4> Result;

static const float MINIMUM_HIT_DISTANCE = 0.001f;
static const float MAXIMUM_TRACE_DISTANCE = 1000.0f;
static const float EPSILON = 0.001f;

float4x4 CameraToWorld;
float4x4 CameraInverseProjection;

float4 DirectionalLight;

struct Shape {
    int shapeType;
    float4 color;
    float3 position;
    float3 size;
};

StructuredBuffer<Shape> Shapes;
int NShapes;

// ----------
// SDFs from http://iquilezles.org/www/articles/distfunctions/distfunctions.htm
float sdfSphere (float3 p, float3 center, float radius) {
    return length(p - center) - radius;
}

float sdfCube(float3 p, float3 center, float3 size) {
    float3 o = abs(p - center) - size;
    float ud = length(max(o,0));
    float n = max(max(min(o.x, 0), min(o.y, 0)), min(o.z, 0));
    return ud + n;
}

float sdfTorus(float3 p, float3 center, float r1, float r2) {
    float2 q = float2(length((p - center).xz) - r1, p.y - center.y);
    return length(q) - r2;
}

float sdfPrism(float3 p, float3 center, float2 h) {
    float3 q = abs(p - center);
    return max(q.z - h.y, max(q.x * 0.866025 + p.y * 0.5, -p.y) - h.x * 0.5);
}

float sdfShape(Shape shape, float3 p) {
    if (shape.shapeType == 0) {
        return sdfSphere(p, shape.position, shape.size.x);
    }
    else if (shape.shapeType == 1) {
        return sdfCube(p, shape.position, shape.size);
    }
    else if (shape.shapeType == 2) {
        return sdfTorus(p, shape.position, shape.size.x, shape.size.y);
    }
    else if (shape.shapeType == 3) {
        return sdfPrism(p, shape.position, shape.size);
    }

    return MAXIMUM_TRACE_DISTANCE;
}
// ----------

float4 mapSceneSdf(float3 p)
{
    float globalDist = MAXIMUM_TRACE_DISTANCE;
    float3 globalColor = float3(0, 0, 0);

    for (int i = 0; i < NShapes; i ++)
    {
        Shape shape = Shapes[i];
        float shapeDist = sdfShape(shape, p);
        float3 shapeColor = shape.color.xyz;

        // combine with previous shapes, if any
        if (shapeDist < globalDist)
        {
            globalDist = shapeDist;
            globalColor = shapeColor;
        }
    }

    return float4(globalColor, globalDist);
}

float3 estimateNormal(float3 p)
{
    float gradX = mapSceneSdf(float3(p.x + EPSILON, p.y, p.z)).w - mapSceneSdf(float3(p.x - EPSILON, p.y, p.z)).w;
    float gradY = mapSceneSdf(float3(p.x, p.y + EPSILON, p.z)).w - mapSceneSdf(float3(p.x, p.y - EPSILON, p.z)).w;
    float gradZ = mapSceneSdf(float3(p.x, p.y, p.z + EPSILON)).w - mapSceneSdf(float3(p.x, p.y, p.z - EPSILON)).w;
    return normalize(float3(gradX, gradY, gradZ));
}

float3 raymarch(float3 rayOrigin, float3 rayDirection)
{
    float totalDistanceTraveled = 0;
    while (totalDistanceTraveled < MAXIMUM_TRACE_DISTANCE)
    {
        float3 currentPosition = rayOrigin + totalDistanceTraveled * rayDirection;
        float4 sceneSdf = mapSceneSdf(currentPosition);
        float dist = sceneSdf.w;

        if (dist <= MINIMUM_HIT_DISTANCE)
        {
            float3 normal = estimateNormal(currentPosition);
            float diffuseIntensity = saturate(dot(normal, -DirectionalLight.xyz)) * DirectionalLight.w;
            float3 surfaceColor = sceneSdf.xyz;
            return surfaceColor * diffuseIntensity;
        }

        totalDistanceTraveled += dist;
    }
    return float3(0, 0, 0);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // transform pixel to [-1,1] range
    uint width, height;
    Result.GetDimensions(width, height);
    float2 uv = float2(id.xy / float2(width, height) * 2 - 1);

    // create ray from camera
    // . origin is camera position in world space
    float3 rayOrigin = mul(CameraToWorld, float4(0, 0, 0, 1)).xyz;

    // . direction is perspective projection of the view-space position re-transformed
    //   in the world space, and renormalized
    float3 rayDirection = mul(CameraInverseProjection, float4(uv, 0, 1)).xyz;
    rayDirection = mul(CameraToWorld, float4(rayDirection, 0)).xyz;
    rayDirection = normalize(rayDirection);

    Result[id.xy] = float4(raymarch(rayOrigin, rayDirection), 1);
}
